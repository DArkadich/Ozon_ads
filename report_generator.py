"""Report generation module for Ozon advertising campaigns."""
import os
from datetime import datetime
from typing import Dict, List, Optional
import pandas as pd
from fpdf import FPDF
from jinja2 import Template
import openpyxl
from openpyxl.styles import Font, PatternFill, Alignment
from openpyxl.utils.dataframe import dataframe_to_rows
from loguru import logger
from config import settings


class ReportGenerator:
    """Generator for campaign performance reports."""
    
    def __init__(self):
        """Initialize report generator."""
        self.output_dir = settings.report_output_dir
        os.makedirs(self.output_dir, exist_ok=True)
    
    def generate_excel_report(self, campaign_summary: Dict, keyword_analysis: List[Dict], 
                            filename: Optional[str] = None) -> str:
        """Generate Excel report with campaign analysis."""
        if not filename:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"ozon_campaign_report_{timestamp}.xlsx"
        
        filepath = os.path.join(self.output_dir, filename)
        
        logger.info(f"Generating Excel report: {filepath}")
        
        # Create workbook
        wb = openpyxl.Workbook()
        
        # Remove default sheet
        wb.remove(wb.active)
        
        # Create summary sheet
        self._create_summary_sheet(wb, campaign_summary)
        
        # Create keywords analysis sheet
        self._create_keywords_sheet(wb, keyword_analysis)
        
        # Create recommendations sheet
        self._create_recommendations_sheet(wb, campaign_summary, keyword_analysis)
        
        # Save workbook
        wb.save(filepath)
        logger.info(f"Excel report saved: {filepath}")
        
        return filepath
    
    def _create_summary_sheet(self, workbook, campaign_summary: Dict):
        """Create campaign summary sheet."""
        ws = workbook.create_sheet("–°–≤–æ–¥–∫–∞ –∫–∞–º–ø–∞–Ω–∏–∏")
        
        # Headers styling
        header_font = Font(bold=True, size=12)
        header_fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
        
        # Title
        ws['A1'] = f"–û—Ç—á—ë—Ç –ø–æ –∫–∞–º–ø–∞–Ω–∏–∏ {campaign_summary.get('campaign_id', 'N/A')}"
        ws['A1'].font = Font(bold=True, size=16)
        ws.merge_cells('A1:D1')
        
        # Generation date
        ws['A2'] = f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        ws.merge_cells('A2:D2')
        
        # Performance metrics
        row = 4
        ws[f'A{row}'] = "–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏"
        ws[f'A{row}'].font = header_font
        ws[f'A{row}'].fill = header_fill
        ws.merge_cells(f'A{row}:B{row}')
        
        metrics = campaign_summary.get('performance_metrics', {})
        
        row += 1
        performance_data = [
            ("–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã", f"{metrics.get('total_spend', 0):.2f} ‚ÇΩ"),
            ("–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞", f"{metrics.get('total_revenue', 0):.2f} ‚ÇΩ"),
            ("–û–±—â–∏–π CTR", f"{metrics.get('overall_ctr', 0):.2f}%"),
            ("–û–±—â–∏–π CR", f"{metrics.get('overall_cr', 0):.2f}%"),
            ("–û–±—â–∏–π –î–†–†", f"{metrics.get('overall_drr', 0):.2f}%"),
            ("ROI", f"{metrics.get('overall_roi', 0):.2f}"),
            ("–í—Å–µ–≥–æ –∫–ª–∏–∫–æ–≤", f"{metrics.get('total_clicks', 0):,}"),
            ("–í—Å–µ–≥–æ –ø–æ–∫–∞–∑–æ–≤", f"{metrics.get('total_impressions', 0):,}"),
            ("–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤", f"{metrics.get('total_orders', 0):,}")
        ]
        
        for metric_name, metric_value in performance_data:
            ws[f'A{row}'] = metric_name
            ws[f'B{row}'] = metric_value
            row += 1
        
        # Actions summary
        row += 2
        ws[f'A{row}'] = "–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è"
        ws[f'A{row}'].font = header_font
        ws[f'A{row}'].fill = header_fill
        ws.merge_cells(f'A{row}:B{row}')
        
        actions = campaign_summary.get('actions_needed', {})
        row += 1
        
        action_labels = {
            'pause': '–û—Ç–∫–ª—é—á–∏—Ç—å –∫–ª—é—á–µ–π',
            'increase_bid': '–ü–æ–≤—ã—Å–∏—Ç—å —Å—Ç–∞–≤–∫–∏',
            'decrease_bid': '–ü–æ–Ω–∏–∑–∏—Ç—å —Å—Ç–∞–≤–∫–∏',
            'monitor': '–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å'
        }
        
        for action, count in actions.items():
            if count > 0:
                ws[f'A{row}'] = action_labels.get(action, action)
                ws[f'B{row}'] = count
                row += 1
        
        # Recommendations
        recommendations = campaign_summary.get('recommendations', [])
        if recommendations:
            row += 2
            ws[f'A{row}'] = "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
            ws[f'A{row}'].font = header_font
            ws[f'A{row}'].fill = header_fill
            ws.merge_cells(f'A{row}:D{row}')
            
            for rec in recommendations:
                row += 1
                ws[f'A{row}'] = rec
                ws.merge_cells(f'A{row}:D{row}')
        
        # Auto-adjust column widths
        for column_cells in ws.columns:
            max_length = 0
            column_letter = None
            for cell in column_cells:
                if hasattr(cell, 'column_letter'):
                    column_letter = cell.column_letter
                if cell.value:
                    max_length = max(max_length, len(str(cell.value)))
            if column_letter:
                ws.column_dimensions[column_letter].width = min(max_length + 2, 50)
    
    def _create_keywords_sheet(self, workbook, keyword_analysis: List[Dict]):
        """Create keywords analysis sheet."""
        ws = workbook.create_sheet("–ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
        
        # Convert to DataFrame
        df = pd.DataFrame(keyword_analysis)
        
        if df.empty:
            ws['A1'] = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
            return
        
        # Select and order columns
        columns = [
            'keyword', 'impressions', 'clicks', 'ctr', 'orders', 'cr', 
            'spend', 'revenue', 'drr', 'action', 'recommendation', 'priority'
        ]
        
        # Filter existing columns
        available_columns = [col for col in columns if col in df.columns]
        df_filtered = df[available_columns]
        
        # Rename columns to Russian
        column_names = {
            'keyword': '–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ',
            'impressions': '–ü–æ–∫–∞–∑—ã',
            'clicks': '–ö–ª–∏–∫–∏',
            'ctr': 'CTR (%)',
            'orders': '–ó–∞–∫–∞–∑—ã',
            'cr': 'CR (%)',
            'spend': '–†–∞—Å—Ö–æ–¥—ã (‚ÇΩ)',
            'revenue': '–í—ã—Ä—É—á–∫–∞ (‚ÇΩ)',
            'drr': '–î–†–† (%)',
            'action': '–î–µ–π—Å—Ç–≤–∏–µ',
            'recommendation': '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è',
            'priority': '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç'
        }
        
        df_filtered = df_filtered.rename(columns=column_names)
        
        # Add DataFrame to worksheet
        for r in dataframe_to_rows(df_filtered, index=False, header=True):
            ws.append(r)
        
        # Style header row
        header_font = Font(bold=True, color="FFFFFF")
        header_fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
        
        for cell in ws[1]:
            cell.font = header_font
            cell.fill = header_fill
            cell.alignment = Alignment(horizontal="center")
        
        # Color-code action column
        action_colors = {
            'pause': PatternFill(start_color="FF6B6B", end_color="FF6B6B", fill_type="solid"),
            'increase_bid': PatternFill(start_color="4ECDC4", end_color="4ECDC4", fill_type="solid"),
            'decrease_bid': PatternFill(start_color="FFE66D", end_color="FFE66D", fill_type="solid"),
            'monitor': PatternFill(start_color="A8E6CF", end_color="A8E6CF", fill_type="solid")
        }
        
        action_col_idx = None
        for idx, cell in enumerate(ws[1], 1):
            if cell.value == '–î–µ–π—Å—Ç–≤–∏–µ':
                action_col_idx = idx
                break
        
        if action_col_idx:
            for row in ws.iter_rows(min_row=2, max_row=ws.max_row, 
                                  min_col=action_col_idx, max_col=action_col_idx):
                cell = row[0]
                if cell.value in action_colors:
                    cell.fill = action_colors[cell.value]
        
        # Auto-adjust column widths
        for column_cells in ws.columns:
            max_length = 0
            column_letter = None
            for cell in column_cells:
                if hasattr(cell, 'column_letter'):
                    column_letter = cell.column_letter
                if cell.value:
                    max_length = max(max_length, len(str(cell.value)))
            if column_letter:
                ws.column_dimensions[column_letter].width = min(max_length + 2, 50)
    
    def _create_recommendations_sheet(self, workbook, campaign_summary: Dict, keyword_analysis: List[Dict]):
        """Create detailed recommendations sheet."""
        ws = workbook.create_sheet("–î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        
        # Title
        ws['A1'] = "–î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"
        ws['A1'].font = Font(bold=True, size=14)
        ws.merge_cells('A1:C1')
        
        row = 3
        
        # Critical issues
        critical_keywords = [k for k in keyword_analysis if k.get('priority', 0) >= 90]
        if critical_keywords:
            ws[f'A{row}'] = "üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ (—Ç—Ä–µ–±—É—é—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è)"
            ws[f'A{row}'].font = Font(bold=True, color="FF0000")
            ws.merge_cells(f'A{row}:C{row}')
            row += 1
            
            for keyword in critical_keywords[:10]:  # Top 10
                ws[f'A{row}'] = keyword.get('keyword', '')
                ws[f'B{row}'] = keyword.get('recommendation', '')
                ws[f'C{row}'] = f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {keyword.get('priority', 0)}"
                row += 1
            row += 1
        
        # High-performance keywords
        high_performers = [k for k in keyword_analysis if 'high_performance' in k.get('issues', [])]
        if high_performers:
            ws[f'A{row}'] = "üìà –í–´–°–û–ö–û–≠–§–§–ï–ö–¢–ò–í–ù–´–ï –ö–õ–Æ–ß–ò (–º–æ–∂–Ω–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å)"
            ws[f'A{row}'].font = Font(bold=True, color="008000")
            ws.merge_cells(f'A{row}:C{row}')
            row += 1
            
            for keyword in high_performers[:10]:
                ws[f'A{row}'] = keyword.get('keyword', '')
                ws[f'B{row}'] = keyword.get('recommendation', '')
                ws[f'C{row}'] = f"CTR: {keyword.get('ctr', 0):.2f}% | CR: {keyword.get('cr', 0):.2f}%"
                row += 1
            row += 1
        
        # Bid adjustments
        bid_adjustments = [k for k in keyword_analysis if k.get('bid_adjustment', 0) != 0]
        if bid_adjustments:
            ws[f'A{row}'] = "üí∞ –ö–û–†–†–ï–ö–¢–ò–†–û–í–ö–ê –°–¢–ê–í–û–ö"
            ws[f'A{row}'].font = Font(bold=True, color="0066CC")
            ws.merge_cells(f'A{row}:C{row}')
            row += 1
            
            for keyword in bid_adjustments[:15]:
                adjustment = keyword.get('bid_adjustment', 0)
                direction = "‚ÜóÔ∏è" if adjustment > 0 else "‚ÜòÔ∏è"
                ws[f'A{row}'] = keyword.get('keyword', '')
                ws[f'B{row}'] = f"{direction} {abs(adjustment):.1f}%"
                ws[f'C{row}'] = keyword.get('recommendation', '')
                row += 1
        
        # Auto-adjust column widths
        for column in ws.columns:
            max_length = 0
            column_letter = column[0].column_letter
            for cell in column:
                if cell.value:
                    max_length = max(max_length, len(str(cell.value)))
            ws.column_dimensions[column_letter].width = min(max_length + 2, 60)
    
    def generate_pdf_report(self, campaign_summary: Dict, filename: Optional[str] = None) -> str:
        """Generate PDF report with campaign summary."""
        if not filename:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"ozon_campaign_summary_{timestamp}.pdf"
        
        filepath = os.path.join(self.output_dir, filename)
        
        logger.info(f"Generating PDF report: {filepath}")
        
        # Create PDF
        pdf = FPDF()
        pdf.add_page()
        
        # Add UTF-8 font for Russian text
        pdf.add_font('DejaVu', '', '/System/Library/Fonts/DejaVuSans.ttf', uni=True)
        pdf.set_font('DejaVu', '', 16)
        
        # Title
        campaign_id = campaign_summary.get('campaign_id', 'N/A')
        pdf.cell(0, 10, f'–û—Ç—á—ë—Ç –ø–æ –∫–∞–º–ø–∞–Ω–∏–∏ {campaign_id}', 0, 1, 'C')
        pdf.ln(5)
        
        # Date
        pdf.set_font('DejaVu', '', 12)
        pdf.cell(0, 10, f'–î–∞—Ç–∞: {datetime.now().strftime("%d.%m.%Y %H:%M")}', 0, 1)
        pdf.ln(5)
        
        # Performance metrics
        pdf.set_font('DejaVu', '', 14)
        pdf.cell(0, 10, '–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:', 0, 1)
        pdf.set_font('DejaVu', '', 12)
        
        metrics = campaign_summary.get('performance_metrics', {})
        
        metrics_text = [
            f"‚Ä¢ –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {metrics.get('total_spend', 0):.2f} ‚ÇΩ",
            f"‚Ä¢ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {metrics.get('total_revenue', 0):.2f} ‚ÇΩ",
            f"‚Ä¢ CTR: {metrics.get('overall_ctr', 0):.2f}%",
            f"‚Ä¢ CR: {metrics.get('overall_cr', 0):.2f}%",
            f"‚Ä¢ –î–†–†: {metrics.get('overall_drr', 0):.2f}%",
            f"‚Ä¢ ROI: {metrics.get('overall_roi', 0):.2f}",
        ]
        
        for text in metrics_text:
            pdf.cell(0, 8, text, 0, 1)
        
        pdf.ln(5)
        
        # Recommendations
        recommendations = campaign_summary.get('recommendations', [])
        if recommendations:
            pdf.set_font('DejaVu', '', 14)
            pdf.cell(0, 10, '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:', 0, 1)
            pdf.set_font('DejaVu', '', 12)
            
            for rec in recommendations[:5]:  # Top 5 recommendations
                # Word wrap for long recommendations
                if len(rec) > 80:
                    words = rec.split(' ')
                    lines = []
                    current_line = ""
                    
                    for word in words:
                        if len(current_line + word) < 80:
                            current_line += word + " "
                        else:
                            lines.append(current_line.strip())
                            current_line = word + " "
                    
                    if current_line:
                        lines.append(current_line.strip())
                    
                    for line in lines:
                        pdf.cell(0, 8, f"‚Ä¢ {line}", 0, 1)
                else:
                    pdf.cell(0, 8, f"‚Ä¢ {rec}", 0, 1)
        
        # Save PDF
        pdf.output(filepath)
        logger.info(f"PDF report saved: {filepath}")
        
        return filepath
    
    def generate_html_report(self, campaign_summary: Dict, keyword_analysis: List[Dict],
                           filename: Optional[str] = None) -> str:
        """Generate HTML report for web viewing."""
        if not filename:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"ozon_campaign_report_{timestamp}.html"
        
        filepath = os.path.join(self.output_dir, filename)
        
        # HTML template
        template_str = """
        <!DOCTYPE html>
        <html lang="ru">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>–û—Ç—á—ë—Ç –ø–æ –∫–∞–º–ø–∞–Ω–∏–∏ {{ campaign_id }}</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 20px; }
                .header { text-align: center; margin-bottom: 30px; }
                .metrics { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin: 20px 0; }
                .metric-card { background: #f5f5f5; padding: 15px; border-radius: 8px; }
                .metric-value { font-size: 24px; font-weight: bold; color: #333; }
                .metric-label { color: #666; margin-top: 5px; }
                .recommendations { background: #e8f4f8; padding: 20px; border-radius: 8px; margin: 20px 0; }
                .critical { background: #ffe6e6; border-left: 4px solid #ff4444; }
                .success { background: #e6ffe6; border-left: 4px solid #44ff44; }
                .warning { background: #fff3e0; border-left: 4px solid #ff9800; }
                table { width: 100%; border-collapse: collapse; margin: 20px 0; }
                th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                th { background-color: #f2f2f2; }
                .action-pause { background-color: #ffebee; }
                .action-increase { background-color: #e8f5e8; }
                .action-decrease { background-color: #fff3e0; }
            </style>
        </head>
        <body>
            <div class="header">
                <h1>–û—Ç—á—ë—Ç –ø–æ –∫–∞–º–ø–∞–Ω–∏–∏ {{ campaign_id }}</h1>
                <p>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {{ date }}</p>
            </div>
            
            <div class="metrics">
                <div class="metric-card">
                    <div class="metric-value">{{ metrics.total_spend|round(2) }} ‚ÇΩ</div>
                    <div class="metric-label">–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value">{{ metrics.overall_ctr|round(2) }}%</div>
                    <div class="metric-label">CTR</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value">{{ metrics.overall_cr|round(2) }}%</div>
                    <div class="metric-label">CR</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value">{{ metrics.overall_drr|round(2) }}%</div>
                    <div class="metric-label">–î–†–†</div>
                </div>
            </div>
            
            {% if recommendations %}
            <div class="recommendations">
                <h2>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h2>
                <ul>
                {% for rec in recommendations %}
                    <li>{{ rec }}</li>
                {% endfor %}
                </ul>
            </div>
            {% endif %}
            
            {% if critical_keywords %}
            <div class="critical">
                <h2>üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã</h2>
                <ul>
                {% for keyword in critical_keywords[:10] %}
                    <li><strong>{{ keyword.keyword }}</strong>: {{ keyword.recommendation }}</li>
                {% endfor %}
                </ul>
            </div>
            {% endif %}
        </body>
        </html>
        """
        
        template = Template(template_str)
        
        # Prepare data
        critical_keywords = [k for k in keyword_analysis if k.get('priority', 0) >= 90]
        
        html_content = template.render(
            campaign_id=campaign_summary.get('campaign_id', 'N/A'),
            date=datetime.now().strftime('%d.%m.%Y %H:%M'),
            metrics=campaign_summary.get('performance_metrics', {}),
            recommendations=campaign_summary.get('recommendations', []),
            critical_keywords=critical_keywords
        )
        
        # Save HTML
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        logger.info(f"HTML report saved: {filepath}")
        return filepath