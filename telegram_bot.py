"""Telegram bot integration for Ozon Ads management."""
import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Optional
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from loguru import logger
from config import settings


class TelegramBot:
    """Telegram bot for campaign management and notifications."""
    
    def __init__(self, ozon_client=None, analyzer=None, keyword_manager=None, 
                 report_generator=None, scheduler=None):
        """Initialize Telegram bot."""
        if not settings.telegram_bot_token:
            logger.warning("Telegram bot token not provided")
            self.bot = None
            return
        
        self.bot = telebot.TeleBot(settings.telegram_bot_token)
        self.chat_id = settings.telegram_chat_id
        
        # Components
        self.ozon_client = ozon_client
        self.analyzer = analyzer
        self.keyword_manager = keyword_manager
        self.report_generator = report_generator
        self.scheduler = scheduler
        
        # Setup handlers
        self._setup_handlers()
        
        # User sessions for multi-step operations
        self.user_sessions = {}
    
    def _setup_handlers(self):
        """Setup bot command handlers."""
        if not self.bot:
            return
        
        # Commands
        self.bot.message_handler(commands=['start'])(self._cmd_start)
        self.bot.message_handler(commands=['help'])(self._cmd_help)
        self.bot.message_handler(commands=['status'])(self._cmd_status)
        self.bot.message_handler(commands=['campaigns'])(self._cmd_campaigns)
        self.bot.message_handler(commands=['analyze'])(self._cmd_analyze)
        self.bot.message_handler(commands=['optimize'])(self._cmd_optimize)
        self.bot.message_handler(commands=['report'])(self._cmd_report)
        self.bot.message_handler(commands=['schedule'])(self._cmd_schedule)
        self.bot.message_handler(commands=['alerts'])(self._cmd_alerts)
        
        # Callback handlers
        self.bot.callback_query_handler(func=lambda call: True)(self._handle_callback)
    
    def start_polling(self):
        """Start bot polling."""
        if not self.bot:
            logger.error("Telegram bot not initialized")
            return
        
        logger.info("Starting Telegram bot polling")
        self.bot.infinity_polling(none_stop=True, interval=1)
    
    def send_message(self, text: str, chat_id: str = None, reply_markup=None):
        """Send message to Telegram."""
        if not self.bot:
            return False
        
        target_chat_id = chat_id or self.chat_id
        if not target_chat_id:
            logger.error("No chat ID provided for Telegram message")
            return False
        
        try:
            self.bot.send_message(target_chat_id, text, reply_markup=reply_markup, parse_mode='HTML')
            return True
        except Exception as e:
            logger.error(f"Failed to send Telegram message: {e}")
            return False
    
    def send_document(self, file_path: str, caption: str = "", chat_id: str = None):
        """Send document to Telegram."""
        if not self.bot:
            return False
        
        target_chat_id = chat_id or self.chat_id
        if not target_chat_id:
            return False
        
        try:
            with open(file_path, 'rb') as doc:
                self.bot.send_document(target_chat_id, doc, caption=caption)
            return True
        except Exception as e:
            logger.error(f"Failed to send document: {e}")
            return False
    
    def _cmd_start(self, message):
        """Handle /start command."""
        welcome_text = """
ü§ñ <b>Ozon Ads Bot</b>

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–º–∏ –∫–∞–º–ø–∞–Ω–∏—è–º–∏ –Ω–∞ Ozon.

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/help - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
/status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/campaigns - —Å–ø–∏—Å–æ–∫ –∫–∞–º–ø–∞–Ω–∏–π
/analyze - –∞–Ω–∞–ª–∏–∑ –∫–∞–º–ø–∞–Ω–∏–∏
/optimize - –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–∞–º–ø–∞–Ω–∏–∏
/report - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞
/schedule - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
/alerts - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        self.send_message(welcome_text, str(message.chat.id))
    
    def _cmd_help(self, message):
        """Handle /help command."""
        help_text = """
<b>üìã –ö–æ–º–∞–Ω–¥—ã Ozon Ads Bot</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ:</b>
/campaigns - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–∞–º–ø–∞–Ω–∏–∏
/analyze - –∞–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
/optimize - –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–∞–º–ø–∞–Ω–∏–π
/report - —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á—ë—Ç

<b>–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è:</b>
/schedule - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
/alerts - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö

<b>–°–ª—É–∂–µ–±–Ω—ã–µ:</b>
/status - —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<b>üí° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö
‚Ä¢ –û—Ç—á—ë—Ç—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –≤ Excel –∏ PDF —Ñ–æ—Ä–º–∞—Ç–∞—Ö
        """
        self.send_message(help_text, str(message.chat.id))
    
    def _cmd_status(self, message):
        """Handle /status command."""
        if not self.ozon_client:
            status_text = "‚ùå <b>Ozon API –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω</b>"
        else:
            try:
                campaigns = self.ozon_client.get_all_campaigns()
                status_text = f"""
‚úÖ <b>–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –ö–∞–º–ø–∞–Ω–∏–π: {len(campaigns)}
‚Ä¢ API: –ø–æ–¥–∫–ª—é—á–µ–Ω
‚Ä¢ –ë–æ—Ç: –∞–∫—Ç–∏–≤–µ–Ω

üïê <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}
                """
            except Exception as e:
                status_text = f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API:</b> {str(e)}"
        
        self.send_message(status_text, str(message.chat.id))
    
    def _cmd_campaigns(self, message):
        """Handle /campaigns command."""
        if not self.ozon_client:
            self.send_message("‚ùå Ozon API –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω", str(message.chat.id))
            return
        
        try:
            campaigns = self.ozon_client.get_all_campaigns()
            
            if not campaigns:
                self.send_message("üì≠ –ö–∞–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", str(message.chat.id))
                return
            
            # Create inline keyboard for campaign selection
            markup = InlineKeyboardMarkup()
            
            campaigns_text = "<b>üìä –í–∞—à–∏ –∫–∞–º–ø–∞–Ω–∏–∏:</b>\n\n"
            
            for i, campaign in enumerate(campaigns[:10]):  # Limit to 10
                campaign_id = str(campaign.get('id', ''))
                campaign_name = campaign.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                status = campaign.get('status', 'unknown')
                
                status_emoji = "üü¢" if status == "active" else "üî¥" if status == "paused" else "‚ö™"
                
                campaigns_text += f"{status_emoji} <b>{campaign_name}</b>\n"
                campaigns_text += f"   ID: {campaign_id}\n"
                campaigns_text += f"   –°—Ç–∞—Ç—É—Å: {status}\n\n"
                
                # Add button for quick analysis
                markup.add(InlineKeyboardButton(
                    f"üìà –ê–Ω–∞–ª–∏–∑: {campaign_name[:20]}...",
                    callback_data=f"analyze_{campaign_id}"
                ))
            
            self.send_message(campaigns_text, str(message.chat.id), markup)
            
        except Exception as e:
            self.send_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–π: {str(e)}", str(message.chat.id))
    
    def _cmd_analyze(self, message):
        """Handle /analyze command."""
        if not self.ozon_client or not self.analyzer:
            self.send_message("‚ùå –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã", str(message.chat.id))
            return
        
        # Show campaign selection for analysis
        try:
            campaigns = self.ozon_client.get_all_campaigns()
            
            if not campaigns:
                self.send_message("üì≠ –ö–∞–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", str(message.chat.id))
                return
            
            markup = InlineKeyboardMarkup()
            
            for campaign in campaigns[:5]:  # Limit to 5
                campaign_id = str(campaign.get('id', ''))
                campaign_name = campaign.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                
                markup.add(InlineKeyboardButton(
                    f"üîç {campaign_name[:30]}...",
                    callback_data=f"analyze_{campaign_id}"
                ))
            
            self.send_message(
                "üîç <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–º–ø–∞–Ω–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:</b>", 
                str(message.chat.id), 
                markup
            )
            
        except Exception as e:
            self.send_message(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", str(message.chat.id))
    
    def _cmd_optimize(self, message):
        """Handle /optimize command."""
        if not settings.auto_optimization_enabled:
            self.send_message("‚ö†Ô∏è –ê–≤—Ç–æ–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö", str(message.chat.id))
            return
        
        # Show optimization options
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("üî¥ –û—Ç–∫–ª—é—á–∏—Ç—å –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏", callback_data="opt_pause"))
        markup.add(InlineKeyboardButton("üìà –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞–≤–∫–∏", callback_data="opt_bids"))
        markup.add(InlineKeyboardButton("üöÄ –ü–æ–ª–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", callback_data="opt_full"))
        
        self.send_message(
            "‚öôÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:</b>\n\n"
            "üî¥ <b>–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–ª—é—á–µ–π</b> - –æ—Ç–∫–ª—é—á–∞–µ—Ç –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞\n"
            "üìà <b>–°—Ç–∞–≤–∫–∏</b> - –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞–≤–∫–∏ –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É\n"
            "üöÄ <b>–ü–æ–ª–Ω–∞—è</b> - –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è —Å—Ä–∞–∑—É",
            str(message.chat.id),
            markup
        )
    
    def _cmd_report(self, message):
        """Handle /report command."""
        if not self.report_generator:
            self.send_message("‚ùå –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á—ë—Ç–æ–≤ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω", str(message.chat.id))
            return
        
        # Show report options
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("üìä Excel –æ—Ç—á—ë—Ç", callback_data="report_excel"))
        markup.add(InlineKeyboardButton("üìÑ PDF –æ—Ç—á—ë—Ç", callback_data="report_pdf"))
        markup.add(InlineKeyboardButton("üìà –ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç (Excel + PDF)", callback_data="report_full"))
        
        self.send_message(
            "üìã <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á—ë—Ç–∞:</b>",
            str(message.chat.id),
            markup
        )
    
    def _cmd_schedule(self, message):
        """Handle /schedule command."""
        if not self.scheduler:
            self.send_message("‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω", str(message.chat.id))
            return
        
        jobs = self.scheduler.get_scheduled_jobs()
        
        schedule_text = "<b>üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á:</b>\n\n"
        
        if not jobs:
            schedule_text += "–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"
        else:
            for job in jobs:
                next_run = job.get('next_run_time', '–ù–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ')
                if next_run != '–ù–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ':
                    try:
                        next_run = datetime.fromisoformat(next_run.replace('Z', '+00:00'))
                        next_run = next_run.strftime('%d.%m.%Y %H:%M')
                    except:
                        pass
                
                schedule_text += f"üîß <b>{job['name']}</b>\n"
                schedule_text += f"   –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: {next_run}\n\n"
        
        # Add control buttons
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", callback_data="run_analysis"))
        markup.add(InlineKeyboardButton("üìä –°–æ–∑–¥–∞—Ç—å –æ—Ç—á—ë—Ç", callback_data="run_report"))
        
        self.send_message(schedule_text, str(message.chat.id), markup)
    
    def _cmd_alerts(self, message):
        """Handle /alerts command."""
        alerts_text = """
üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>

<b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>
‚Ä¢ –î–†–† > 50% - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å
‚Ä¢ –†–∞—Å—Ö–æ–¥—ã > 10,000‚ÇΩ –≤ –¥–µ–Ω—å
‚Ä¢ –ö–ª—é—á–∏ –±–µ–∑ –∑–∞–∫–∞–∑–æ–≤ –ø—Ä–∏ >30 –∫–ª–∏–∫–∞—Ö
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–≤—Ç–æ–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏

<b>–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á—ë—Ç—ã:</b>
‚Ä¢ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 10:00
‚Ä¢ –°–≤–æ–¥–∫–∞ –ø–æ –≤—Å–µ–º –∫–∞–º–ø–∞–Ω–∏—è–º
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏

–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º.
        """
        
        self.send_message(alerts_text, str(message.chat.id))
    
    def _handle_callback(self, call):
        """Handle inline keyboard callbacks."""
        chat_id = str(call.message.chat.id)
        data = call.data
        
        try:
            if data.startswith("analyze_"):
                campaign_id = data.replace("analyze_", "")
                self._analyze_campaign(campaign_id, chat_id)
            
            elif data.startswith("opt_"):
                optimization_type = data.replace("opt_", "")
                self._run_optimization(optimization_type, chat_id)
            
            elif data.startswith("report_"):
                report_type = data.replace("report_", "")
                self._generate_report(report_type, chat_id)
            
            elif data == "run_analysis":
                self._run_manual_analysis(chat_id)
            
            elif data == "run_report":
                self._generate_report("excel", chat_id)
            
            # Acknowledge callback
            self.bot.answer_callback_query(call.id)
            
        except Exception as e:
            logger.error(f"Callback error: {e}")
            self.bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    def _analyze_campaign(self, campaign_id: str, chat_id: str):
        """Analyze specific campaign."""
        self.send_message("üîç <b>–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–∞–º–ø–∞–Ω–∏—é...</b>", chat_id)
        
        try:
            date_to = datetime.now().strftime('%Y-%m-%d')
            date_from = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')
            
            # Get data
            stats = self.ozon_client.get_campaign_stats(campaign_id, date_from, date_to)
            keyword_stats = self.ozon_client.get_keyword_stats(campaign_id, date_from, date_to)
            
            # Analyze
            analysis = self.analyzer.analyze_keywords(keyword_stats)
            summary = self.analyzer.get_campaign_summary(stats, analysis)
            
            # Format results
            result_text = f"""
üìä <b>–ê–Ω–∞–ª–∏–∑ –∫–∞–º–ø–∞–Ω–∏–∏ {campaign_id}</b>

<b>üí∞ –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∑–∞ 7 –¥–Ω–µ–π:</b>
‚Ä¢ –†–∞—Å—Ö–æ–¥—ã: {summary['performance_metrics']['total_spend']:.2f} ‚ÇΩ
‚Ä¢ CTR: {summary['performance_metrics']['overall_ctr']:.2f}%
‚Ä¢ CR: {summary['performance_metrics']['overall_cr']:.2f}%
‚Ä¢ –î–†–†: {summary['performance_metrics']['overall_drr']:.2f}%

<b>üéØ –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>
            """
            
            actions = summary.get('actions_needed', {})
            if actions.get('pause', 0) > 0:
                result_text += f"‚Ä¢ üî¥ –û—Ç–∫–ª—é—á–∏—Ç—å: {actions['pause']} –∫–ª—é—á–µ–π\n"
            if actions.get('increase_bid', 0) > 0:
                result_text += f"‚Ä¢ üìà –ü–æ–≤—ã—Å–∏—Ç—å —Å—Ç–∞–≤–∫–∏: {actions['increase_bid']} –∫–ª—é—á–µ–π\n"
            if actions.get('decrease_bid', 0) > 0:
                result_text += f"‚Ä¢ üìâ –ü–æ–Ω–∏–∑–∏—Ç—å —Å—Ç–∞–≤–∫–∏: {actions['decrease_bid']} –∫–ª—é—á–µ–π\n"
            
            # Critical issues
            critical_issues = summary.get('critical_issues', [])
            if critical_issues:
                result_text += f"\n‚ö†Ô∏è <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:</b>\n"
                for issue in critical_issues[:3]:  # Top 3
                    result_text += f"‚Ä¢ {issue['keyword']}: {issue['recommendation']}\n"
            
            self.send_message(result_text, chat_id)
            
        except Exception as e:
            self.send_message(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}", chat_id)
    
    def _run_optimization(self, optimization_type: str, chat_id: str):
        """Run optimization based on type."""
        if not settings.auto_optimization_enabled:
            self.send_message("‚ö†Ô∏è –ê–≤—Ç–æ–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞", chat_id)
            return
        
        self.send_message("‚öôÔ∏è <b>–ó–∞–ø—É—Å–∫–∞—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é...</b>", chat_id)
        
        # This would trigger actual optimization
        # For now, just show confirmation
        self.send_message(
            f"‚úÖ <b>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞</b>\n\n"
            f"–¢–∏–ø: {optimization_type}\n"
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏.",
            chat_id
        )
    
    def _generate_report(self, report_type: str, chat_id: str):
        """Generate and send report."""
        self.send_message("üìä <b>–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á—ë—Ç...</b>", chat_id)
        
        try:
            # Get first campaign for demo
            campaigns = self.ozon_client.get_all_campaigns()
            if not campaigns:
                self.send_message("‚ùå –ö–∞–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", chat_id)
                return
            
            campaign_id = str(campaigns[0].get('id', ''))
            date_to = datetime.now().strftime('%Y-%m-%d')
            date_from = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')
            
            # Get data and analyze
            stats = self.ozon_client.get_campaign_stats(campaign_id, date_from, date_to)
            keyword_stats = self.ozon_client.get_keyword_stats(campaign_id, date_from, date_to)
            analysis = self.analyzer.analyze_keywords(keyword_stats)
            summary = self.analyzer.get_campaign_summary(stats, analysis)
            
            # Generate report
            if report_type in ["excel", "full"]:
                excel_path = self.report_generator.generate_excel_report(summary, analysis)
                self.send_document(excel_path, "üìä Excel –æ—Ç—á—ë—Ç –ø–æ –∫–∞–º–ø–∞–Ω–∏–∏", chat_id)
            
            if report_type in ["pdf", "full"]:
                pdf_path = self.report_generator.generate_pdf_report(summary)
                self.send_document(pdf_path, "üìÑ PDF –æ—Ç—á—ë—Ç –ø–æ –∫–∞–º–ø–∞–Ω–∏–∏", chat_id)
            
            self.send_message("‚úÖ <b>–û—Ç—á—ë—Ç –≥–æ—Ç–æ–≤!</b>", chat_id)
            
        except Exception as e:
            self.send_message(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞: {str(e)}", chat_id)
    
    def _run_manual_analysis(self, chat_id: str):
        """Run manual analysis for all campaigns."""
        self.send_message("üîç <b>–ó–∞–ø—É—Å–∫–∞—é –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∫–∞–º–ø–∞–Ω–∏–π...</b>", chat_id)
        
        # This would trigger the scheduler's analysis
        self.send_message(
            "‚úÖ <b>–ê–Ω–∞–ª–∏–∑ –∑–∞–ø—É—â–µ–Ω</b>\n\n"
            "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏.",
            chat_id
        )
    
    # Notification methods for scheduler callbacks
    async def notify_analysis_complete(self, results: List[Dict]):
        """Notify about completed analysis."""
        if not self.bot or not self.chat_id:
            return
        
        total_campaigns = len(results)
        critical_issues = sum(len([k for k in r['analysis'] if k.get('priority', 0) >= 90]) for r in results)
        
        message = f"""
üìä <b>–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω</b>

‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–º–ø–∞–Ω–∏–π: {total_campaigns}
‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º: {critical_issues}

{datetime.now().strftime('%d.%m.%Y %H:%M')}
        """
        
        self.send_message(message)
    
    async def notify_optimization_complete(self, results: List[Dict]):
        """Notify about completed optimization."""
        if not self.bot or not self.chat_id:
            return
        
        total_actions = sum(r['actions_taken'] for r in results)
        total_paused = sum(r['paused_keywords'] for r in results)
        
        message = f"""
‚öôÔ∏è <b>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>

‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–π: {total_actions}
‚Ä¢ –û—Ç–∫–ª—é—á–µ–Ω–æ –∫–ª—é—á–µ–π: {total_paused}
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–º–ø–∞–Ω–∏–π: {len(results)}

{datetime.now().strftime('%d.%m.%Y %H:%M')}
        """
        
        self.send_message(message)
    
    async def notify_critical_issue(self, campaign_id: str, issues: List[Dict]):
        """Notify about critical issues."""
        if not self.bot or not self.chat_id:
            return
        
        message = f"""
üö® <b>–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê</b>

–ö–∞–º–ø–∞–Ω–∏—è: {campaign_id}
–ü—Ä–æ–±–ª–µ–º –Ω–∞–π–¥–µ–Ω–æ: {len(issues)}

<b>–¢–æ–ø –ø—Ä–æ–±–ª–µ–º—ã:</b>
        """
        
        for issue in issues[:3]:
            message += f"‚Ä¢ {issue['keyword']}: {issue['recommendation']}\n"
        
        message += f"\n‚è∞ {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        
        self.send_message(message)